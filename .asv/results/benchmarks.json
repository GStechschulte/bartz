{
    "benchmarks.TimeCompilation.time_run_mcmc_compile": {
        "code": "class TimeCompilation:\n    def time_run_mcmc_compile(self):\n        @functools.partial(\n            jax.jit, static_argnames=('n_save', 'n_burn', 'n_skip', 'callback')\n        )\n        def f(**kw):\n            return bartz.mcmcloop.run_mcmc(**kw)\n    \n        f.lower(**self.kw).compile()\n\n    def setup(self):\n        key = random.key(202504251557)\n        keys = list(random.split(key, 3))\n    \n        # generate simulated data\n        p = 2\n        n = 30\n        sigma = 0.1\n        T = 2\n        X = random.uniform(keys.pop(), (p, n), float, -2, 2)\n        f = lambda X: jnp.sum(jnp.cos(2 * jnp.pi / T * X), axis=0)\n        y = f(X) + sigma * random.normal(keys.pop(), (n,))\n    \n        # dry run the interface to generate an initial bart state conveniently\n        if inspect.ismodule(bartz.BART):\n            gbart = bartz.BART.gbart\n        else:\n            gbart = bartz.BART  # pre v0.2.0\n        bart = gbart(X, y, ndpost=0, nskip=0)\n        self.kw = dict(\n            key=keys.pop(),\n            bart=bart._mcmc_state,\n            n_save=1,\n            n_burn=1,\n            n_skip=1,\n            callback=bartz.mcmcloop.make_simple_print_callback(100),\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeCompilation.time_run_mcmc_compile",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "178126330ad47b49b4f47bbadf1c6279c736bd62f9b0afc9bafe70661aac85cc",
        "warmup_time": -1
    },
    "version": 2
}