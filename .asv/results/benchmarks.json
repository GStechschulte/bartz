{
    "benchmarks.TimeCompilation.time_run_mcmc_compile": {
        "code": "class TimeCompilation:\n    def time_run_mcmc_compile(self):\n        @functools.partial(jax.jit, static_argnums=(1, 2, 3, 4))\n        def f(*args):\n            return bartz.mcmcloop.run_mcmc(*args)\n        f.lower(*self.args).compile()\n\n    def setup(self):\n        p = 2\n        n = 30\n        sigma = 0.1\n        T = 2\n        key = random.key(202504251557)\n        keys = list(random.split(key, 16))\n        X = random.uniform(keys.pop(), (p, n), float, -2, 2)\n        f = lambda X: jnp.sum(jnp.cos(2 * jnp.pi / T * X), axis=0)\n        y = f(X) + sigma * random.normal(keys.pop(), (n,))\n        bart = bartz.BART.gbart(X, y, ndpost=0, nskip=0)\n        self.args = (\n            bart._mcmc_state,\n            1, 1, 1,\n            bartz.mcmcloop.make_simple_print_callback(100),\n            keys.pop(),\n        )",
        "min_run_count": 2,
        "name": "benchmarks.TimeCompilation.time_run_mcmc_compile",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "f9e4a28c1582cfba0801e9e4a30e7bcfc3b9f9a044ac821ee36063e2e079ac85",
        "warmup_time": -1
    },
    "version": 2
}